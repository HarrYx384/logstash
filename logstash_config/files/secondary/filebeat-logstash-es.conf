input {
    beats {
        port => "5044"
        include_codec_tag => false
    }
}
filter {

    if [source] == "/opt/sfs2x/SFS2X/logs/smartfox.log" {
        grok {
        id => "smartfox"
        add_tag => ["elk-logs-logstash-fbaa","grokparse-success"]
        tag_on_failure => ["elk-logs-logstash-fbaa", "smartfox-grokparsefailure"]
        match => { "message" => "^(?<timestamp>%{MONTHDAY} %{MONTH} %{YEAR} \| %{HOUR}:%{MINUTE}:%{SECOND}) \| %{LOGLEVEL:loglevel}\s*\| (?<pool>%{WORD}-%{INT}-%{WORD}-%{INT})\s*\| (?<plugin>%{WORD})\s*\|\s*\| \{(?<lib>%{WORD})\}\: (?<field1>%{WORD}) (?<log_type>%{WORD}) RoomCount: (?:-|%{NUMBER:roomcount:int}) UserCount: (?:-|%{NUMBER:usercount:int})"
        }
        }
    }


    else if [source] == "/var/log/mpl/service-superteam.log" {
        grok {
            id => "service-fantasy"
            add_tag => ["elk-logs-logstash-fbaa","grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "fantasy-grokparsefailure"]
            match => { "message" => [
                "^(?<timestamp>%{TIMESTAMP_ISO8601}) (%{SPACE}%{GREEDYDATA:fantasy_thread_type} %{SPACE}%{LOGLEVEL:fantasy_log_level} %{SPACE}%{GREEDYDATA:fantasy_endpoint}) - (\[%{NOTSPACE:fantasy_message}\]) (%{SPACE}%{WORD:fantasy_status}) (%{SPACE}%{NUMBER:fantasy_game_id:int})",
                "^(?<timestamp>%{TIMESTAMP_ISO8601}) (%{SPACE}%{GREEDYDATA:fantasy_thread_type} %{SPACE}%{LOGLEVEL:fantasy_log_level} %{SPACE}%{GREEDYDATA:fantasy_endpoint}) - (\[%{NOTSPACE:fantasy_message}\]) (%{SPACE}%{WORD:fantasy_status}) (%{SPACE}%{NUMBER:fantasy_game_id:int}) (%{SPACE}%{NUMBER:fantasy_contest_id:int}) (%{SPACE}%{GREEDYDATA:fantasy_key})",
                "^%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} - %{WORD:state} %{WORD:localRequestId} %{GREEDYDATA:remoteRequestId} %{WORD:api} %{NUMBER:response-code:int} %{NUMBER:response-time:int} /%{IPORHOST:ip}:%{NUMBER:port:int} %{GREEDYDATA:remote-user-agent}"
                ]
                }
            }
    }

    else if [source] == "/var/log/mpl/service-accounts.log" {
        grok {
            id => "service-accounts"
            add_tag => ["elk-logs-logstash-fbaa","drop-grpc-grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "accounts-grokparsefailure"]
            match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} - %{WORD:state} %{WORD:localRequestId} %{GREEDYDATA:remoteRequestId} %{WORD:api} %{NUMBER:response-code:int} %{NUMBER:response-time:int} /%{IPORHOST:ip}:%{NUMBER:port:int} %{GREEDYDATA:remote-user-agent}"
                }
            }
    }

    else if [source] == "/var/log/mpl/service-api-gateway.log" {
        grok {
            id => "api-gateway"
            add_tag => ["elk-logs-logstash-fbaa","grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "api-gateway-grokparsefailure"]
            break_on_match => true
            match => { "message" => "^%{IPORHOST:clientip} (?:-|%{USER:ident}) (?:-|%{USER:auth}) \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:api}(?: HTTP/%{NUMBER:httpversion:float})?|-)\" %{NUMBER:response-code:int} (?:-|%{NUMBER:bytes:int}) \"-\" (?:%{QUOTEDSTRING:agent}) (?:-|%{NUMBER:response-time:int})"}
        }
        mutate {
            id => "api-mutate"
            gsub => [
            # replace all IDs with *
            "api", "[0-9]+", "*"
            ]
        }
        mutate {
            id => "wfr-mutate"
            gsub => [
            #replace strings in wfr api with *
            "api", "[*]|[a-z]+[\*]+.*[a-z]+", "*"
            ]
        }
    }

    else if [source] == "/var/log/mpl/service-user-data.log" {
        grok {
            id => "service-user-data"
            add_tag => ["elk-logs-logstash-fbaa","drop-grpc-grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "user-data-grokparsefailure"]
            match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} - %{WORD:state} %{WORD:localRequestId} %{GREEDYDATA:remoteRequestId} %{WORD:api} %{NUMBER:response-code:int} %{NUMBER:response-time:int} /%{IPORHOST:ip}:%{NUMBER:port:int} %{GREEDYDATA:remote-user-agent}"
                }
            }
    }

    else if [source] == "/var/log/mpl/service-auth.log" {
        grok {
            id => "service-auth"
            add_tag => ["elk-logs-logstash-fbaa","grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "auth-grokparsefailure"]
            match => { "message" => [
               "^%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} - %{WORD:Category} Success: %{NUMBER:Success:int} Failures: %{NUMBER:Failures:int} Avg: %{NUMBER:Avg:int} Min: %{NUMBER:Min:int} Max: %{NUMBER:Max:int} P95: %{NUMBER:P95:int}",
               "^%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} - %{WORD:error_type} Provider: %{WORD:provider_name} Failures: %{NUMBER:Failures:int}%"
                ]
                }
            }
    }
   else if [source] == "/var/log/mpl/service-user-relations-v2.log" {
        grok {
            id => "service-user-relations-v2"
            add_tag => ["elk-logs-logstash-fbaa","grpc-grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "user-relations-grokparsefailure"]
            match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} - %{WORD:state} %{WORD:localRequestId} %{GREEDYDATA:remoteRequestId} %{WORD:api} %{NUMBER:response-code:int} %{NUMBER:response-time:int} /%{IPORHOST:ip}:%{NUMBER:port:int} %{GREEDYDATA:remote-user-agent}"
                }
            }

    }
    else if [source] == "/var/log/mpl/service-fraud.log" {
        grok {
            id => "service-fraud"
            add_tag => ["elk-logs-logstash-fbaa","grpc-grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "fraud-grokparsefailure"]
            match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp} %{NUMBER:thread_id:int} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} - %{WORD:state} %{WORD:localRequestId} %{GREEDYDATA:remoteRequestId} %{WORD:api} %{NUMBER:response-code:int} %{NUMBER:response-time:int} /%{IPORHOST:ip}:%{NUMBER:port:int} %{GREEDYDATA:remote-user-agent}"
                }
            }
    }
    else if [source] == "/var/log/mpl/service-private-api-gateway.log" {
        grok {
            id => "private-api-gateway"
            add_tag => ["elk-logs-logstash-fbaa","grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "private-api-gateway-grokparsefailure"]
            break_on_match => true
            match => { "message" => "^%{IPORHOST:clientip} (?:-|%{USER:ident}) (?:-|%{USER:auth}) \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:api}(?: HTTP/%{NUMBER:httpversion:float})?|-)\" %{NUMBER:response-code:int} (?:-|%{NUMBER:bytes:int}) \"-\" (?:%{QUOTEDSTRING:agent}) (?:-|%{NUMBER:response-time:int})"}
        }
    }

    else if [source] == "/var/log/mpl/service-notifications.log" {
        grok {
            id => "service-notifications"
            add_tag => ["elk-logs-logstash-fbaa","grpc-grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "notifications-grokparsefailure"]
            match => { "message" => [
                "^(%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} \- %{WORD:notifications-level} Module: %{WORD:module-name} Requested: (%{NUMBER:requested:int}) Dispatched: (%{NUMBER:dispatched:int}) \(%{NUMBER}\%\) GoogleDispatched: (%{NUMBER:google-dispatched:int}) \(%{NUMBER}\%\) GoogleErrors: (%{NUMBER:google-errors:int}) \(%{NUMBER}\%\))",
                "^(%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} \- %{WORD:notifications-level} Requested: (%{NUMBER:requested:int}) Dispatched: (%{NUMBER:dispatched:int}) \(%{NUMBER}\%\) GoogleDispatched: (%{NUMBER:google-dispatched:int}) \(%{NUMBER}\%\) GoogleErrors: (%{NUMBER:google-errors:int}) \(%{NUMBER}\%\) QueueSize: (%{NUMBER:queue-size:int}) RequestDelay: (%{NUMBER:request-delay:int}) QueuingDelay: (%{NUMBER:queuing-delay:int}) DispatchDelay: (%{NUMBER:dispatched-delay:int}))",
                "^(%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} \- %{WORD:notifications-level} Requested: (%{NUMBER:requested:int}) Dispatched: (%{NUMBER:dispatched:int}) \(%{NUMBER}\%\) GoogleDispatched: (%{NUMBER:google-dispatched:int}) \(%{NUMBER}\%\) GoogleErrors: (%{NUMBER:google-errors:int}) \(%{NUMBER}\%\) QueueSize: (%{NUMBER:queue-size:int}) SbQueueSize: (%{NUMBER:sbqueue-size:int})  RequestDelay: (%{NUMBER:request-delay:int}) QueuingDelay: (%{NUMBER:queuing-delay:int}) DispatchDelay: (%{NUMBER:dispatched-delay:int}))"
                ]
                }
            }
    }
    else if [source] == "/var/log/mpl/service-beneficiary.log" {
        grok {
            id => "service-beneficiary"
            add_tag => ["elk-logs-logstash-fbaa","grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "beneficiary-grokparsefailure"]
            match => { "message" => [
                        "^(%{TIMESTAMP_ISO8601:beneficiary-date} [\[]%{GREEDYDATA:thread_name}[\]] %{LOGLEVEL:loglevel} %{GREEDYDATA:class} [-] [\[]%{GREEDYDATA:http-response}[\]] %{WORD:api-method} %{URI:api} %{NUMBER:beneficiary_response_code:int} %{NUMBER:beneficiary_response_time:int})",
                        "^(%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:loglevel}  %{JAVACLASS:javaclass} - \[%{WORD:partner}\] %{GREEDYDATA:api_call} %{NUMBER:response_time:int})"
                ]
                }
            }
             grok {
                        match => { "api" =>  ["(%{URIHOST:partner-url}%{URIPATH:api-call})"]}
                  }
            if [partner-url] == "api.juspay.in"
                {
                 mutate {
                  id => "juspay-mutate"
                  gsub =>
                  [
                  # replace all unique ids  with *
                  "api-call", "(\/customers).+", "/customers/*/wallets"
                  ]
                  }

                 mutate {
                  id => "juspay-mutate-1"
                  gsub =>
                  [
                  # replace all unique ids  with *
                  "api-call", "(\/wallets).+", "/wallets/*"
                  ]
                  }

                }
            if [partner-url] == "killbill.mpl.internal:8080" {
                 mutate {
                  id => "killbill-url"
                  gsub =>
                  [
                  # replace all unique ids  with
                  "partner-url", "(?!.*[a-z]).+", ""
                  ]
                  }
                 mutate {
                  id => "killbill-call"
                  gsub =>
                  [
                  # replace all unique ids  with
                  "api-call", "(\/1.0\/kb\/accounts\/).+", "/1.0/kb/accounts/*/paymentMethods"
                  ]
                  }

                 mutate {
                  id => "killbill-call-2"
                  gsub =>
                  [
                  # replace all unique ids
                  "api-call", "(\/1.0\/kb\/paymentMethods\/).+", "/1.0/kb/accounts/paymentMethods"
                  ]
                  }

               }
            if [partner-url] == "fwdproxy.mpl.internal" {
                 mutate {
                  id => "fwd-prodxy-call"
                  gsub =>
                  [
                  # remove first backslash
                  "api-call", "(^\/\/)", "/"
                  ]
                  }
               }
    }
    else if [source] == "/var/log/haproxy/haproxy.log" {
        grok {
            id => "haproxy"
            add_tag => ["elk-logs-logstash-fbaa","grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "haproxy-grokparsefailure"]
            match => { "message" => '^%{SYSLOGTIMESTAMP:timestamp} %{DATA:syslog_server} %{DATA:program}\[%{NUMBER:pid:int}\]: %{DATA:client_ip}:%{NUMBER:client_port:int} \[%{HAPROXYDATE:accept_date}\] %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} %{NUMBER:time_request_tr:int}/%{NUMBER:time_queue:int}/%{NUMBER:time_connect:int}/%{NUMBER:time_backend_response:int}/%{NUMBER:time_duration:int} %{NUMBER:http_status_code:int} %{NUMBER:bytes_read:int} %{DATA:captured_request_cookie} %{DATA:captured_response_cookie} %{DATA:termination_state} %{NUMBER:actconn:int}/%{NUMBER:feconn:int}/%{NUMBER:beconn:int}/%{NUMBER:srvconn:int}/%{NUMBER:retries:int} %{NUMBER:srv_queue:int}/%{NUMBER:backend_queue:int} "%{WORD:Method} %{URIPATHPARAM:http_request} HTTP/%{DATA:http_version}"'}
        }
    }
    else if [source] == "/var/log/mpl/service-callbreak-monitoring.log" {
        grok {
            id => "callbreak-monitoring"
            add_tag => ["elk-logs-logstash-fbaa","grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "callbreak-monitoring-grokparsefailure"]
            match => { "message" => '^(?<timestamp>%{TIMESTAMP_ISO8601}) RoomCount: (%{NUMBER:roomcount:int}) UserCount: (%{NUMBER:usercount:int})'}
        }
    }


    else if [source] == "/var/log/mpl/rummy-monitoring.log" {
        grok {
            id => "rummy-v2-monitoring"
            add_tag => ["elk-logs-logstash-fbaa","grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "rummy-v2-monitoring-grokparsefailure"]
            match => { "message" => [
                        '^(?<timestamp>%{TIMESTAMP_ISO8601}) RoomCount: (%{NUMBER:roomcount:int}) UserCount: (%{NUMBER:usercount:int})',
                        '^(?<timestamp>%{TIMESTAMP_ISO8601}) CF: (%{NUMBER:lobby_points}) RoomCount: (%{NUMBER:roomcount:int}) UserCount: (%{NUMBER:usercount:int})'
                        ]
                     }
        }
    }
    else if [source] == "/var/log/mpl/deals-rummy-monitoring.log" {
        grok {
            id => "deals-rummy-v2-monitoring"
            add_tag => ["elk-logs-logstash-fbaa","grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "deals-rummy-v2-monitoring-grokparsefailure"]
            match => { "message" => [
                        '^(?<timestamp>%{TIMESTAMP_ISO8601}) RoomCount: (%{NUMBER:roomcount:int}) UserCount: (%{NUMBER:usercount:int})',
                        '^(?<timestamp>%{TIMESTAMP_ISO8601}) CF: (%{NUMBER:lobby_points}) RoomCount: (%{NUMBER:roomcount:int}) UserCount: (%{NUMBER:usercount:int})'
                        ]
                     }
        }
    }

    else if [source] == "/var/log/mpl/service-analytics-api-gateway.log" {
        grok {
            id => "analytics-api-gateway"
            add_tag => ["ELK-Logstash-logging-prod-fbfb","grokparse-success"]
            tag_on_failure => ["ELK-Logstash-logging-prod-fbfb", "api-gateway-grokparsefailure"]
            break_on_match => true
            match => { "message" => "^%{IPORHOST:clientip} (?:-|%{USER:ident}) (?:-|%{USER:auth}) \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:api}(?: HTTP/%{NUMBER:httpversion:float})?|-)\" %{NUMBER:response-code:int} (?:-|%{NUMBER:bytes:int}) \"-\" (?:%{QUOTEDSTRING:agent}) (?:-|%{NUMBER:response-time:int})"}
        }
        mutate {
            id => "analytics-api-mutate"
            gsub => [
            # replace all IDs with *
            "api", "[0-9]+", "*"
            ]
        }
    }
    else if [source] == "/home/ec2-user/killbill/logs/catalina.out" {
     grok {
            id => "service-kilbil"
            add_tag => ["elk-logs-logstash-fbaa","grokparse-success"]
            tag_on_failure => ["elk-logs-logstash-fbaa", "killbill-grokparsefailure"]
            match => { "message" => [
                      "^(%{TIMESTAMP_ISO8601:killbill-date} %{GREEDYDATA:other-info}, %{WORD:Parnter} [\[]%{GREEDYDATA:http-response}[\]] %{WORD:api-method} %{URI:api} %{NUMBER:killbill_response_code:int} %{NUMBER:killbill_response_time:int})",
                      "^(%{TIMESTAMP_ISO8601:killbill-date} %{GREEDYDATA:other-info} %{WORD:Parnter} [\[]%{GREEDYDATA:http-response}[\]] %{WORD:api-method} %{URI:api} [\{]%{GREEDYDATA:other-info-1}[\}] %{NUMBER:killbill_response_code:int} %{NUMBER:killbill_response_time:int})",
                      "^(%{TIMESTAMP_ISO8601:killbill-date} %{GREEDYDATA:other-info}, %{WORD:Parnter} [\[]%{GREEDYDATA:http-response}[\]] %{WORD:api-method} %{URI:api} %{NUMBER:killbill_response_code:int})",
"^(%{TIMESTAMP_ISO8601:timestamp} lvl='%{WORD:loglevel}', %{GREEDYDATA:other-info}, %{WORD:api-method} url %{URI:api} and  Response Code: %{NUMBER:killbill_response_code:int}  and time taken %{NUMBER:killbill_response_time:int})"
                ]
                }
           }
           grok {
                        match => { "api" =>  ["(%{URIHOST:partner-url}%{URIPATH:api-call})"]}
                }
           if [partner-url] == "api.juspay.in" {
              mutate {
                  id => "juspay-mutate-killbill"
                  gsub =>
                  [
                  # replace all unique ids  with *
                  "api-call", "(\/orders\/).+", "/orders/*"
                  ]
                  }

           }
           if [partner-url] == "api.razorpay.com" {
              mutate {
                  id => "razorpay-mutate-killbill"
                  gsub =>
                  [
                  # replace all unique ids  with *
                  "api-call", "(\/v1\/orders\/).+", "/v1/orders/*/payments"
                  ]
                  }

           }

  }
   else if "/var/log/containers" in [log][file][path] {
        mutate {
            id => "gp-global-prod-eks"
            add_tag => ["elk-logs-logstash-fbaa", "global-prod-eks-not-parsed"]
        }
    }
    else if [source] == "/var/log/mpl/backend-dashboard.log" {
        mutate {
            id => "service-global-dashboard"
            add_tag => ["elk-logs-logstash-fbaa","service-global-dashboard-not-parsed"]
        }
    }

    else {
        mutate {
        id => "not-parsed"
        add_tag => ["elk-logs-logstash-fbaa", "not-parsed"]
        }
    }

    if "drop-grpc-grokparse-success" in [tags] {
    drop { }
    }


    if [timestamp] {
        mutate {
            id => "save-logstash-timestamp"
            copy => { "@timestamp" => "logstash_timestamp" }
        }
        date {
            id => "match-date"
            match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z", "dd MMM yyyy | HH:mm:ss,SSS", "yyyy-MM-dd HH:mm:ss,SSS", "MMM dd HH:mm:ss", "ISO8601"]
            remove_field => ["timestamp"]
        }
        if "_dateparsefailure" not in [tags] {
            ruby {
                id => "calulate-processing-time"
                init => "require 'time'"
                code => "
                diff = event.get('logstash_timestamp') - event.get('@timestamp');
                event.set('processing_time', diff.to_f);
                "
            add_tag => [ "processing_time_calculated" ]
            }
        }

    }
    if [source] {
        ruby {
            code => "
                filename = event.get('[source]').split('/').last
                event.set('service',(filename.split('.').first).split('service-').last)
                "
        }
    }
 }

output {
  if "grokparse-success" in [tags] {
    elasticsearch {
        hosts => ["https://elk-logs-elasticsearch-data-node-01.mpl.live:9200","https://elk-logs-elasticsearch-data-node-02.mpl.live:9200","https://elk-logs-elasticsearch-data-node-03.mpl.live:9200","https://elk-logs-elasticsearch-data-node-04.mpl.live:9200","https://elk-logs-elasticsearch-data-node-05.mpl.live:9200","https://elk-logs-elasticsearch-data-node-06.mpl.live:9200","https://elk-logs-elasticsearch-data-node-07.mpl.live:9200","https://elk-logs-elasticsearch-data-node-08.mpl.live:9200","https://elk-logs-elasticsearch-data-node-09.mpl.live:9200","https://elk-logs-elasticsearch-data-node-10.mpl.live:9200","https://elk-logs-elasticsearch-data-node-11.mpl.live:9200","https://elk-logs-elasticsearch-data-node-12.mpl.live:9200","https://elk-logs-elasticsearch-data-node-13.mpl.live:9200","https://elk-logs-elasticsearch-data-node-14.mpl.live:9200","https://elk-logs-elasticsearch-data-node-15.mpl.live:9200","https://elk-logs-elasticsearch-data-node-16.mpl.live:9200","https://elk-logs-elasticsearch-data-node-17.mpl.live:9200","https://elk-logs-elasticsearch-data-node-18.mpl.live:9200","https://elk-logs-elasticsearch-data-node-19.mpl.live:9200","https://elk-logs-elasticsearch-data-node-20.mpl.live:9200"]
        ilm_enabled => true
        cacert => '/etc/logstash/certs/DigiCertCA.crt'
        ssl_certificate_verification => true
        ssl => true
        user => "logstash_writer"
        password => "M4HCf7x2Xqu0Tmqz"
        manage_template => false
        index => "logstash-dashboards-%{+yyyy.MM.dd}"
    }

  } else if "grpc-grokparse-success" in [tags] {
    elasticsearch {
        hosts => ["https://elk-logs-elasticsearch-data-node-01.mpl.live:9200","https://elk-logs-elasticsearch-data-node-02.mpl.live:9200","https://elk-logs-elasticsearch-data-node-03.mpl.live:9200","https://elk-logs-elasticsearch-data-node-04.mpl.live:9200","https://elk-logs-elasticsearch-data-node-05.mpl.live:9200","https://elk-logs-elasticsearch-data-node-06.mpl.live:9200","https://elk-logs-elasticsearch-data-node-07.mpl.live:9200","https://elk-logs-elasticsearch-data-node-08.mpl.live:9200","https://elk-logs-elasticsearch-data-node-09.mpl.live:9200","https://elk-logs-elasticsearch-data-node-10.mpl.live:9200","https://elk-logs-elasticsearch-data-node-11.mpl.live:9200","https://elk-logs-elasticsearch-data-node-12.mpl.live:9200","https://elk-logs-elasticsearch-data-node-13.mpl.live:9200","https://elk-logs-elasticsearch-data-node-14.mpl.live:9200","https://elk-logs-elasticsearch-data-node-15.mpl.live:9200","https://elk-logs-elasticsearch-data-node-16.mpl.live:9200","https://elk-logs-elasticsearch-data-node-17.mpl.live:9200","https://elk-logs-elasticsearch-data-node-18.mpl.live:9200","https://elk-logs-elasticsearch-data-node-19.mpl.live:9200","https://elk-logs-elasticsearch-data-node-20.mpl.live:9200"]
        ilm_enabled => true
        cacert => '/etc/logstash/certs/DigiCertCA.crt'
        ssl_certificate_verification => true
        ssl => true
        user => "logstash_writer"
        password => "M4HCf7x2Xqu0Tmqz"
        manage_template => false
        index => "logstash-grpc-%{+yyyy.MM.dd}"

    }
  } else if "service-global-dashboard-not-parsed" in [tags] {
        elasticsearch {
           hosts => ["https://elk-logs-elasticsearch-data-node-01.mpl.live:9200","https://elk-logs-elasticsearch-data-node-02.mpl.live:9200","https://elk-logs-elasticsearch-data-node-03.mpl.live:9200","https://elk-logs-elasticsearch-data-node-04.mpl.live:9200","https://elk-logs-elasticsearch-data-node-05.mpl.live:9200","https://elk-logs-elasticsearch-data-node-06.mpl.live:9200","https://elk-logs-elasticsearch-data-node-07.mpl.live:9200","https://elk-logs-elasticsearch-data-node-08.mpl.live:9200","https://elk-logs-elasticsearch-data-node-09.mpl.live:9200","https://elk-logs-elasticsearch-data-node-10.mpl.live:9200","https://elk-logs-elasticsearch-data-node-11.mpl.live:9200","https://elk-logs-elasticsearch-data-node-12.mpl.live:9200","https://elk-logs-elasticsearch-data-node-13.mpl.live:9200","https://elk-logs-elasticsearch-data-node-14.mpl.live:9200","https://elk-logs-elasticsearch-data-node-15.mpl.live:9200","https://elk-logs-elasticsearch-data-node-16.mpl.live:9200","https://elk-logs-elasticsearch-data-node-17.mpl.live:9200","https://elk-logs-elasticsearch-data-node-18.mpl.live:9200","https://elk-logs-elasticsearch-data-node-19.mpl.live:9200","https://elk-logs-elasticsearch-data-node-20.mpl.live:9200"]
           ilm_enabled => true
           cacert => '/etc/logstash/certs/DigiCertCA.crt'
           ssl_certificate_verification => true
           ssl => true
           user => "logstash_writer"
           password => "M4HCf7x2Xqu0Tmqz"
           manage_template => false
           index => "logstash-global-dashboard-%{+yyyy.MM.dd}"
        }
  }else if "global-prod-eks-not-parsed" in [tags] {
        elasticsearch {
           hosts => ["https://elk-logs-elasticsearch-data-node-01.mpl.live:9200","https://elk-logs-elasticsearch-data-node-02.mpl.live:9200","https://elk-logs-elasticsearch-data-node-03.mpl.live:9200","https://elk-logs-elasticsearch-data-node-04.mpl.live:9200","https://elk-logs-elasticsearch-data-node-05.mpl.live:9200","https://elk-logs-elasticsearch-data-node-06.mpl.live:9200","https://elk-logs-elasticsearch-data-node-07.mpl.live:9200","https://elk-logs-elasticsearch-data-node-08.mpl.live:9200","https://elk-logs-elasticsearch-data-node-09.mpl.live:9200","https://elk-logs-elasticsearch-data-node-10.mpl.live:9200","https://elk-logs-elasticsearch-data-node-11.mpl.live:9200","https://elk-logs-elasticsearch-data-node-12.mpl.live:9200","https://elk-logs-elasticsearch-data-node-13.mpl.live:9200","https://elk-logs-elasticsearch-data-node-14.mpl.live:9200","https://elk-logs-elasticsearch-data-node-15.mpl.live:9200","https://elk-logs-elasticsearch-data-node-16.mpl.live:9200","https://elk-logs-elasticsearch-data-node-17.mpl.live:9200","https://elk-logs-elasticsearch-data-node-18.mpl.live:9200","https://elk-logs-elasticsearch-data-node-19.mpl.live:9200","https://elk-logs-elasticsearch-data-node-20.mpl.live:9200"]
           ilm_enabled => true
           cacert => '/etc/logstash/certs/DigiCertCA.crt'
           ssl_certificate_verification => true
           ssl => true
           user => "logstash_writer"
           password => "M4HCf7x2Xqu0Tmqz"
           manage_template => false
           index => "logstash-k8s-%{+yyyy.MM.dd}"
        }
  } else {
    elasticsearch {
        hosts => ["https://elk-logs-elasticsearch-data-node-01.mpl.live:9200","https://elk-logs-elasticsearch-data-node-02.mpl.live:9200","https://elk-logs-elasticsearch-data-node-03.mpl.live:9200","https://elk-logs-elasticsearch-data-node-04.mpl.live:9200","https://elk-logs-elasticsearch-data-node-05.mpl.live:9200","https://elk-logs-elasticsearch-data-node-06.mpl.live:9200","https://elk-logs-elasticsearch-data-node-07.mpl.live:9200","https://elk-logs-elasticsearch-data-node-08.mpl.live:9200","https://elk-logs-elasticsearch-data-node-09.mpl.live:9200","https://elk-logs-elasticsearch-data-node-10.mpl.live:9200","https://elk-logs-elasticsearch-data-node-11.mpl.live:9200","https://elk-logs-elasticsearch-data-node-12.mpl.live:9200","https://elk-logs-elasticsearch-data-node-13.mpl.live:9200","https://elk-logs-elasticsearch-data-node-14.mpl.live:9200","https://elk-logs-elasticsearch-data-node-15.mpl.live:9200","https://elk-logs-elasticsearch-data-node-16.mpl.live:9200","https://elk-logs-elasticsearch-data-node-17.mpl.live:9200","https://elk-logs-elasticsearch-data-node-18.mpl.live:9200","https://elk-logs-elasticsearch-data-node-19.mpl.live:9200","https://elk-logs-elasticsearch-data-node-20.mpl.live:9200"]
        ilm_enabled => true
        cacert => '/etc/logstash/certs/DigiCertCA.crt'
        ssl_certificate_verification => true
        ssl => true
        user => "logstash_writer"
        password => "M4HCf7x2Xqu0Tmqz"
        manage_template => false
        index => "logstash-%{+yyyy.MM.dd}"

    }
  }
}

