input {
    beats {
        port => "5044"
        include_codec_tag => false
    }
}
filter {

    if [source] == "/opt/sfs2x/SFS2X/logs/smartfox.log" {
        grok {
        id => "smartfox"
        add_tag => ["elk-logs-logstash-sfs-ebbb","grokparse-success"]
        tag_on_failure => ["elk-logs-logstash-sfs-ebbb", "smartfox-grokparsefailure"]
        match => { "message" => [
                      "^(?<timestamp>%{MONTHDAY} %{MONTH} %{YEAR} \| %{HOUR}:%{MINUTE}:%{SECOND}) \| %{LOGLEVEL}\s*\| (%{WORD}-%{INT}-%{WORD}-%{INT})
\s*\| (%{WORD})\s*\|\s*\| \{(%{WORD})\}\: (%{WORD}) (%{WORD}) RoomCount: (?:-|%{NUMBER:roomcount:int}) UserCount: (?:-|%{NUMBER:usercount:int})",
                      "^(?<timestamp>%{MONTHDAY} %{MONTH} %{YEAR} \| %{HOUR}:%{MINUTE}:%{SECOND}) \| %{LOGLEVEL}\s*\| (%{WORD}-%{INT}-%{WORD}-%{INT})
\s*\| (%{WORD})\s*\|\s*\| \{(%{WORD})\}\: KBRE StatsWriter system queue size : (?:-|%{NUMBER:system_queue_size:int}) extension queue size : (?:-|%{NU
MBER:extenstion_queue_size:int})"
                                ]
        }
        }
        if "grokparse-success" in [tags] {
            mutate {
               id => "remove-smartfox-fields"
               remove_field => [ "message" ]
               remove_field => [ "host" ]
               remove_field => [ "input" ]
               remove_field => [ "logstash_timestamp" ]
               remove_field => [ "offset" ]
               remove_field => [ "prospector" ]
               remove_field => [ "log" ]
               remove_field => "[beat][name]"
               remove_field => "[beat][version]"
            }
       }
    }



    else {
        mutate {
        id => "not-parsed"
        add_tag => ["elk-logs-logstash-sfs-ebbb", "not-parsed"]
        }
    }


    if [timestamp] {
        mutate {
            id => "save-logstash-timestamp"
            copy => { "@timestamp" => "logstash_timestamp" }
        }
        date {
            id => "match-date"
            match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z", "dd MMM yyyy | HH:mm:ss,SSS", "yyyy-MM-dd HH:mm:ss,SSS", "MMM dd HH:mm:ss"]
            remove_field => ["timestamp"]
        }
        if "_dateparsefailure" not in [tags] {
            ruby {
                id => "calulate-processing-time"
                init => "require 'time'"
                code => "
                diff = event.get('logstash_timestamp') - event.get('@timestamp');
                event.set('processing_time', diff.to_f);
                "
            add_tag => [ "processing_time_calculated" ]
            }
            mutate {
               id => "remove-logstash_timestamp-field"
               remove_field => [ "logstash_timestamp" ]
            }
        }

    }
 }

output {
  if "grokparse-success" in [tags] {
        elasticsearch {
              hosts => ["https://elk-elasticsearch-hot-data-node-1.mpl.live:9200", "https://elk-elasticsearch-hot-data-node-2.mpl.live:9200", "https://elk-elasticsearch-hot-data-node-3.mpl.live:9200", "https://elk-elasticsearch-hot-data-node-4.mpl.live:9200", "https://elk-elasticsearch-hot-data-node-5.mpl.live:9200", "https://elk-elasticsearch-hot-data-node-6.mpl.live:9200", "https://elk-elasticsearch-hot-data-node-1.mpl.live:9200", "https://elk-elasticsearch-hot-data-node-2.mpl.live:9200", "https://elk-elasticsearch-hot-data-node-3.mpl.live:9200", "https://elk-elasticsearch-warm-data-node-4.mpl.live:9200"]
              ilm_enabled => true
              cacert => '/etc/logstash/certs/DigiCertCA.crt'
              ssl_certificate_verification => true
              ssl => true
              user => "logstash_writer"
              password => "YjgwOGZm3"
              manage_template => false
              index => "logstash-dashboards-games-%{+yyyy.MM.dd}"
        }
    }
else {
         elasticsearch {
        hosts => ["https://elk-logs-elasticsearch-data-node-01.mpl.live:9200","https://elk-logs-elasticsearch-data-node-02.mpl.live:9200","https://elk-logs-elasticsearch-data-node-03.mpl.live:9200","https://elk-logs-elasticsearch-data-node-04.mpl.live:9200","https://elk-logs-elasticsearch-data-node-05.mpl.live:9200","https://elk-logs-elasticsearch-data-node-06.mpl.live:9200","https://elk-logs-elasticsearch-data-node-07.mpl.live:9200","https://elk-logs-elasticsearch-data-node-08.mpl.live:9200","https://elk-logs-elasticsearch-data-node-09.mpl.live:9200","https://elk-logs-elasticsearch-data-node-10.mpl.live:9200","https://elk-logs-elasticsearch-data-node-11.mpl.live:9200","https://elk-logs-elasticsearch-data-node-12.mpl.live:9200","https://elk-logs-elasticsearch-data-node-13.mpl.live:9200","https://elk-logs-elasticsearch-data-node-14.mpl.live:9200","https://elk-logs-elasticsearch-data-node-15.mpl.live:9200","https://elk-logs-elasticsearch-data-node-16.mpl.live:9200","https://elk-logs-elasticsearch-data-node-17.mpl.live:9200","https://elk-logs-elasticsearch-data-node-18.mpl.live:9200","https://elk-logs-elasticsearch-data-node-19.mpl.live:9200","https://elk-logs-elasticsearch-data-node-20.mpl.live:9200"]
        ilm_enabled => true
        cacert => '/etc/logstash/certs/DigiCertCA.crt'
        ssl_certificate_verification => true
        ssl => true
        user => "logstash_writer"
        password => "M4HCf7x2Xqu0Tmqz"
        manage_template => false
        index => "logstash-%{+yyyy.MM.dd}"
    }
  }
}
