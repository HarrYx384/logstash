input {
    beats {
        port => "5044"
        include_codec_tag => false
    }
}
filter {

    if [source] == "/var/log/mpl/service-api-gateway.log" {
        grok {
            id => "api-gateway"
            add_tag => ["elk-logstash-dashboards-abcf","grokparse-success"]
            tag_on_failure => ["elk-logstash-dashboards-abcf", "api-gateway-grokparsefailure"]
            break_on_match => true
            match => { "message" => "^%{IPORHOST:clientip} (?:-|%{USER:ident}) (?:-|%{USER:auth}) \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:api}(?: HTTP/%{NUMBER:httpversion:float})?|-)\" %{NUMBER:response-code:int} (?:-|%{NUMBER:bytes:int}) \"-\" (?:%{QUOTEDSTRING:agent}) (?:-|%{NUMBER:response-time:int})"}
        }

        mutate {
            # Preserve full api in api-non-parsed field
            copy => { "api" => "api-non-parsed" }
        }
        mutate {
            id => "api-mutate"
            gsub => [
            # remove string after '?' from api
            "api", "\?.*", "\1"
            ]
        }
        mutate {
            id => "gameplay-api-mutate"
            gsub => [
            # replace all numbers with *
            "api", "[0-9]+", "*"
            ]
        }
        mutate {
            id => "wfr-mutate"
            gsub => [
            #replace strings in wfr api with *
            "api", "[*]|[a-z]+[\*]+.*[a-z]+", "*"
            ]
        }
        if "gameplay" in [api] {
          grok {
            id => "gameplay-tournament-id-filter"
            tag_on_failure => []
            match => { "api-non-parsed" => "^\/gameplay\/%{NUMBER:tournament-id}"}
          }
        }
    }

    else if [source] == "/var/log/mpl/service-auth.log" {
        grok {
            id => "service-auth"
            add_tag => ["elk-logstash-dashboards-abcf","auth-grokparse-success"]
            tag_on_failure => ["elk-logstash-dashboards-abcf", "auth-grokparsefailure"]
            match => { "message" => [
               "^%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} - %{WORD:Category} Success: %{NUMBER:Success:int} Failures: %{NUMBER:Failures:int} Avg: %{NUMBER:Avg:int} Min: %{NUMBER:Min:int} Max: %{NUMBER:Max:int} P95: %{NUMBER:P95:int}",
               "^%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} - %{WORD:error_type} Provider: %{WORD:provider_name} Failures: %{NUMBER:Failures:int}%"
                ]
                }
            }
        grok {
            id => "service-auth-grpc"
            add_tag => ["grpc-grokparse-success"]
            match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} - %{WORD:state} %{WORD:localRequestId} %{GREEDYDATA:remoteRequestId} %{WORD:api} %{NUMBER:response-code:int} %{NUMBER:response-time:int} /%{IPORHOST:ip}:%{NUMBER:port:int} %{GREEDYDATA:remote-user-agent}"
                }
            }
    }
    else if [source] == "/var/log/mpl/service-tournament-engine.log" {
        grok {
            id => "service-tournament-engine-grpc"
            add_tag => ["grpc-grokparse-success"]
            match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} - %{WORD:state} %{WORD:localRequestId} %{GREEDYDATA:remoteRequestId} %{WORD:api} %{NUMBER:response-code:int} %{NUMBER:response-time:int} /%{IPORHOST:ip}:%{NUMBER:port:int} %{GREEDYDATA:remote-user-agent}"
                }
            }
    }


    else if [source] == "/var/log/mpl/service-private-api-gateway.log" {
        grok {
            id => "private-api-gateway"
            add_tag => ["elk-logstash-dashboards-abcf","grokparse-success"]
            tag_on_failure => ["elk-logstash-dashboards-abcf", "private-api-gateway-grokparsefailure"]
            break_on_match => true
            match => { "message" => "^%{IPORHOST:clientip} (?:-|%{USER:ident}) (?:-|%{USER:auth}) \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:api}(?: HTTP/%{NUMBER:httpversion:float})?|-)\" %{NUMBER:response-code:int} (?:-|%{NUMBER:bytes:int}) \"-\" (?:%{QUOTEDSTRING:agent}) (?:-|%{NUMBER:response-time:int})"}
        }
        mutate {
            # Preserve full api in api-non-parsed field
            copy => { "api" => "api-non-parsed" }
        }
    }

    else if [source] == "/var/log/mpl/service-analytics-api-gateway.log" {
        grok {
            id => "analytics-api-gateway"
            add_tag => ["elk-logstash-dashboards-abcf","grokparse-success"]
            tag_on_failure => ["elk-logstash-dashboards-abcf", "analytics-api-gateway-grokparsefailure"]
            break_on_match => true
            match => { "message" => "^%{IPORHOST:clientip} (?:-|%{USER:ident}) (?:-|%{USER:auth}) \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:api}(?: HTTP/%{NUMBER:httpversion:float})?|-)\" %{NUMBER:response-code:int} (?:-|%{NUMBER:bytes:int}) \"-\" (?:%{QUOTEDSTRING:agent}) (?:-|%{NUMBER:response-time:int})"}
        }
        mutate {
            # Preserve full api in api-non-parsed field
            copy => { "api" => "api-non-parsed" }
        }
        mutate {
            id => "analytics-api-mutate"
            gsub => [
            # replace all IDs with *
            "api", "[0-9]+", "*"
            ]
        }
    }

    if [source] == "/opt/sfs2x/SFS2X/logs/smartfox.log" {
        grok {
        id => "smartfox"
        add_tag => ["elk-logstash-dashboards-abcf","grokparse-success"]
        tag_on_failure => ["elk-logstash-dashboards-abcf", "smartfox-grokparsefailure"]
        match => { "message" => "^(?<timestamp>%{MONTHDAY} %{MONTH} %{YEAR} \| %{HOUR}:%{MINUTE}:%{SECOND}) \| %{LOGLEVEL}\s*\| (%{WORD}-%{INT}-%{WORD}-%{INT})\s*\| (%{WORD})\s*\|\s*\| \{(%{WORD})\}\: (%{WORD}) (%{WORD}) RoomCount: (?:-|%{NUMBER:roomcount:int}) UserCount: (?:-|%{NUMBER:usercount:int})"
        }
        }
        if "grokparse-success" in [tags] {
            mutate {
               id => "remove-smartfox-fields"
               remove_field => [ "message" ]
               remove_field => [ "host" ]
               remove_field => [ "input" ]
               remove_field => [ "logstash_timestamp" ]
               remove_field => [ "offset" ]
               remove_field => [ "prospector" ]
               remove_field => [ "log" ]
               remove_field => "[beat][name]"
               remove_field => "[beat][version]"
            }
       }
    }

    else if [source] == "/var/log/mpl/service-callbreak-monitoring.log" or [source] == "/var/log/mpl/service-callbreak-v2-monitoring.log" {
        grok {
            id => "callbreak-monitoring"
            add_tag => ["elk-logstash-dashboards-abcf","grokparse-success"]
            tag_on_failure => ["elk-logstash-dashboards-abcf", "callbreak-monitoring-grokparsefailure"]
            match => { "message" => '^(?<timestamp>%{TIMESTAMP_ISO8601}) RoomCount: (%{NUMBER:roomcount:int}) UserCount: (%{NUMBER:usercount:int})'}
        }
        if "grokparse-success" in [tags] {
            mutate {
               id => "remove-callbreak-fields"
               remove_field => [ "message" ]
               remove_field => [ "beat" ]
               remove_field => [ "host" ]
               remove_field => [ "input" ]
               remove_field => [ "logstash_timestamp" ]
               remove_field => [ "offset" ]
               remove_field => [ "prospector" ]
               remove_field => [ "log" ]
            }
        }
    }

    else if [source] == "/var/log/mpl/rummy-monitoring.log" {
        grok {
            id => "rummy-v2-monitoring"
            add_tag => ["elk-logstash-dashboards-abcf","grokparse-success"]
            tag_on_failure => ["elk-logstash-dashboards-abcf", "rummy-v2-monitoring-grokparsefailure"]
            match => { "message" => [
                        '^(?<timestamp>%{TIMESTAMP_ISO8601}) RoomCount: (%{NUMBER:roomcount:int}) UserCount: (%{NUMBER:usercount:int})',
                        '^(?<timestamp>%{TIMESTAMP_ISO8601}) CF: (%{NUMBER:lobby_points}) RoomCount: (%{NUMBER:roomcount:int}) UserCount: (%{NUMBER:usercount:int})'
                        ]
                     }
        }
        if "grokparse-success" in [tags] {
            mutate {
               id => "remove-rummy-fields"
               remove_field => [ "message" ]
               remove_field => [ "beat" ]
               remove_field => [ "host" ]
               remove_field => [ "input" ]
               remove_field => [ "logstash_timestamp" ]
               remove_field => [ "offset" ]
               remove_field => [ "prospector" ]
               remove_field => [ "log" ]
            }
        }
    }
    else if [source] == "/var/log/mpl/deals-rummy-monitoring.log" {
        grok {
            id => "deals-rummy-v2-monitoring"
            add_tag => ["elk-logstash-dashboards-abcf","grokparse-success"]
            tag_on_failure => ["elk-logstash-dashboards-abcf", "deals-rummy-v2-monitoring-grokparsefailure"]
            match => { "message" => [
                        '^(?<timestamp>%{TIMESTAMP_ISO8601}) RoomCount: (%{NUMBER:roomcount:int}) UserCount: (%{NUMBER:usercount:int})',
                        '^(?<timestamp>%{TIMESTAMP_ISO8601}) CF: (%{NUMBER:lobby_points}) RoomCount: (%{NUMBER:roomcount:int}) UserCount: (%{NUMBER:usercount:int})'
                        ]
                     }
        }
        if "grokparse-success" in [tags] {
            mutate {
               id => "remove-deals-rummy-fields"
               remove_field => [ "message" ]
               remove_field => [ "beat" ]
               remove_field => [ "host" ]
               remove_field => [ "input" ]
               remove_field => [ "logstash_timestamp" ]
               remove_field => [ "offset" ]
               remove_field => [ "prospector" ]
               remove_field => [ "log" ]
            }
        }
    }
    else if [source] == "/var/log/mpl/pool-rummy-monitoring.log" {
        grok {
            id => "pool-rummy-v2-monitoring"
            add_tag => ["elk-logstash-dashboards-abcf","grokparse-success"]
            tag_on_failure => ["elk-logstash-dashboards-abcf", "pool-rummy-v2-monitoring-grokparsefailure"]
            match => { "message" => [
                        '^(?<timestamp>%{TIMESTAMP_ISO8601}) RoomCount: (%{NUMBER:roomcount:int}) UserCount: (%{NUMBER:usercount:int})',
                        '^(?<timestamp>%{TIMESTAMP_ISO8601}) CF: (%{NUMBER:lobby_points}) RoomCount: (%{NUMBER:roomcount:int}) UserCount: (%{NUMBER:usercount:int})'
                        ]
                     }
        }
        if "grokparse-success" in [tags] {
            mutate {
               id => "remove-pool-rummy-fields"
               remove_field => [ "message" ]
               remove_field => [ "beat" ]
               remove_field => [ "host" ]
               remove_field => [ "input" ]
               remove_field => [ "logstash_timestamp" ]
               remove_field => [ "offset" ]
               remove_field => [ "prospector" ]
               remove_field => [ "log" ]
            }
        }
    }
    else if [source] == "/var/log/mpl/service-api-gateway-system.log" {
     grok {
                      id => "api-gateway-system"
                      add_tag => ["elk-logstash-dashboards-abcf","grokparse-success"]
                      tag_on_failure => ["elk-logstash-dashboards-abcf", "api-gateway-system-logs-grokparsefailure"]
                      match => { "message"   => [ '^(%{LOGLEVEL}  \[%{TIMESTAMP_ISO8601:timestamp}\] %{JAVACLASS:javaclass}: \[checkforVPNProxies\] vpn %{WORD:proxy_type} found for ip %{IPORHOST:clientip})',
                                                   '^(%{LOGLEVEL}  \[%{TIMESTAMP_ISO8601:timestamp}\] %{JAVACLASS:javaclass}: \[checkForVPNProxyPostLogin\] proxyType %{WORD:proxy_type} found for ip %{IPORHOST:clientip} userId %{NUMBER:userid:int} countryCode %{WORD:country_code})'
                                ]

                               }

                     }
         }
    else if [source] == "/var/log/mpl/service-beneficiary.log" {
     grok {
                      id => "beneficiary-us"
                      add_tag => ["elk-logstash-dashboards-abcf","grokparse-success"]
                      tag_on_failure => ["elk-logstash-dashboards-abcf", "beneficiary-us-logs-grokparsefailure"]
                      match => { "message"   => [ '^(%{TIMESTAMP_ISO8601:timestamp} \[(?<threadname>[^\]]+)\] %{LOGLEVEL:log-level}  %{JAVACLASS:javaclass} - \[%{WORD:partner_us}\] %{GREEDYDATA:api_call} %{NUMBER:response_time:int})'
                                ]

                               }

                     }
         }

    else {
        mutate {
        id => "not-parsed"
        add_tag => ["elk-logstash-dashboards-abcf", "not-parsed"]
        }
    }

    if "grpc-grokparse-success" in [tags] {
        drop { }
    }

    if "grokparse-success" in [tags] {
        mutate {
           id => "remove-message-field"
           remove_field => [ "message" ]
        }
    }

    if [timestamp] {
        mutate {
            id => "save-logstash-timestamp"
            copy => { "@timestamp" => "logstash_timestamp" }
        }
        date {
            id => "match-date"
            match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z", "dd MMM yyyy | HH:mm:ss,SSS", "yyyy-MM-dd HH:mm:ss,SSS", "MMM dd HH:mm:ss", "ISO8601"]
            remove_field => ["timestamp"]
        }
        if "_dateparsefailure" not in [tags] {
            ruby {
                id => "calulate-processing-time"
                init => "require 'time'"
                code => "
                diff = event.get('logstash_timestamp') - event.get('@timestamp');
                event.set('processing_time', diff.to_f);
                "
            add_tag => [ "processing_time_calculated" ]
            }
            mutate {
               id => "remove-logstash_timestamp-field"
               remove_field => [ "logstash_timestamp" ]
            }
        }

    }

    if [source] {
        ruby {
            code => "
                filename = event.get('[source]').split('/').last
                event.set('service',(filename.split('.').first).split('service-').last)
                "
        }
    }
 }

output {
    if "grokparse-success" in [tags] {
        # Send data to ES Dashboards
          pipeline {
            send_to => ["es-dashboards-output-pipeline"]
          }
    }
    else {
       # Send to Logs ES
       pipeline {
        send_to => ["es-logs-output-pipeline"]
      }
    }
}
