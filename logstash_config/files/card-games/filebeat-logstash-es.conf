input {
    beats {
        port => "5044"
        include_codec_tag => false
    }
}
filter {

    if [source] == "/var/log/mpl/service-rummy-deals.log"
   {
        grok {
        id => "rummy"
        add_tag => ["HOSTNAME","grokparse-success"]
        tag_on_failure => ["HOSTNAME", "card-games-grokparsefailure"]
        match => { "message" => [
                                '^%{GREEDYDATA:game} %{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:log-level}\]:: CCU, %{NUMBER:CCU:int},  %{GREEDYDATA:game_type}, %{GREEDYDATA:hostname}',
                                '^%{GREEDYDATA:game} %{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:log_level}\]:: EVENT_ACKNOWLEDGED: %{GREEDYDATA:event_name}, %{GREEDYDATA:id}, %{NUMBER:userid:int}, %{NUMBER:response-time:int}',
                                '^%{GREEDYDATA:game} %{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:log-level}\]:: GRPC_REQUEST_COUNTER, %{WORD:event_1} : %{NUMBER:event_1_value:int}, %{WORD:event_2} : %{NUMBER:event_2_value:int}, %{WORD:event_3} : %{NUMBER:event_3_value:int},  %{GREEDYDATA:game-type}, %{GREEDYDATA:hostname}',
                                '^%{GREEDYDATA:game} %{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:log-level}\]:: GRPC_REQUEST_COUNTER, %{WORD:event_1} : %{NUMBER:event_1_value:int}, %{WORD:event_2} : %{NUMBER:event_2_value:int}, %{WORD:event_3} : %{NUMBER:event_3_value:int}, %{WORD:event_4} : %{NUMBER:event_4_value:int},  %{GREEDYDATA:game-type}, %{GREEDYDATA:hostname}'
                               ]
            }
        }
    }

    if [timestamp] {
        mutate {
            id => "save-logstash-timestamp"
            copy => { "@timestamp" => "logstash_timestamp" }
        }
        date {
            id => "match-date"
            match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z", "dd MMM yyyy | HH:mm:ss,SSS", "yyyy-MM-dd HH:mm:ss,SSS", "MMM dd HH:mm:ss", "ISO8601"]
            remove_field => ["timestamp"]
        }
        if "_dateparsefailure" not in [tags] {
            ruby {
                id => "calulate-processing-time"
                init => "require 'time'"
                code => "
                diff = event.get('logstash_timestamp') - event.get('@timestamp');
                event.set('processing_time', diff.to_f);
                "
            add_tag => [ "processing_time_calculated" ]
            }
        }

    }
    if [source] {
        ruby {
            code => "
                filename = event.get('[source]').split('/').last
                event.set('service',(filename.split('.').first).split('service-').last)
                "
        }
    }
# }


}
output {
    if "grokparse-success" in [tags] {
        # Send data to ES Dashboards
          pipeline {
            send_to => ["es-dashboards-output-pipeline"]
          }
    }
    else {
       # Send to Logs ES
       pipeline {
        send_to => ["es-logs-output-pipeline"]
      }
    }
}
